"""
HF method using PySCF.
"""

from pyscf import scf
from taco.methods.scf import SCFMethod
from taco.methods.pyscf.util import get_pyscf_molecule


class HFPySCF(SCFMethod):
    """Base class for method objects.

    Attributes
    ----------
    density : list[np.ndarray(dtype=float)]
        List with densities obtained with this method.
    energy : dict('name', np.ndarray)
        Energies obtained with this method.

    Properties
    ----------
    restricted : bool
        Wheter the wavefunction is restricted or not.

    Methods
    ---------
    __init__(self, mol)
        Initialize the method.
    get_density(self) :
        Return density/densities.
    get_energy(self) :
        Return final SCF energy/energies.
    get_fock(self) :
        Return Fock matrix.
    solve :
        Perform the SCF calculation.
    perturbe_fock(self, pot) :
        Add a potential to the Fock matrix.

    """
    def __init__(self, mol, basis):
        """ SCFMethod object.

        Parameters
        ----------
        mol : qcelemental Molecule object
            Molecule information.
        basis : string
            Name of the basis set to be usef.

        """
        SCFMethod.__init__(self, mol)
        self.mol_pyscf = get_pyscf_molecule(self.mol, basis)
        if self.restricted:
            self.scf_object = scf.RHF(self.mol_pyscf)
        else:
            raise NotImplementedError

    def get_fock(self):
        """Return Fock matrix."""
        return self.scf_object.get_fock()

    def perturbe_fock(self, pot):
        """Add an effective potential to the Fock matrix.

        Parameters
        ----------
        pot : np.ndarray(dtype=float)
            Effective potential in the form of a Fock matrix.

        """
        ref = self.scf_object.get_hcore()
        pot += ref
        # Override function
        self.scf_object.get_hcore = lambda *args: pot

    def solve(self, **scfkwargs):
        """Perform SCF calculation.

        Kwargs
        ------
        conv_tol : float
            converge threshold.
        conv_tol_grad : float
            gradients converge threshold.
        dump_chk : bool
            Whether to save SCF intermediate results in the checkpoint file
        dm0 : ndarray
            Initial guess density matrix.  If not given (the default), the kernel
            takes the density matrix generated by ``mf.get_init_guess``.
        callback : function(envs_dict) => None
            callback function takes one dict as the argument which is
            generated by the builtin function :func:`locals`, so that the
            callback function can access all local variables in the current
            envrionment.

        """
        self.scf_object.kernel(**scfkwargs)
        self.energy["scf"] = self.scf_object.e_tot
        self.density = self.scf_object.make_rdm1()

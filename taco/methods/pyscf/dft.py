"""
DFT method using PySCF.
"""

import numpy as np
from copy import copy
from pyscf import dft, lib
from taco.methods.scf import SCFMethod
from taco.methods.pyscf.util import get_pyscf_molecule


class DFTPySCF(SCFMethod):
    """Base class for method objects.

    Attributes
    ----------
    density : list[np.ndarray(dtype=float)]
        List with densities obtained with this method.
    energy : dict('name', np.ndarray)
        Energies obtained with this method.

    Properties
    ----------
    restricted : bool
        Wheter the wavefunction is restricted or not.

    Methods
    ---------
    __init__(self, mol)
        Initialize the method.
    get_density(self) :
        Return density/densities.
    get_energy(self) :
        Return final SCF energy/energies.
    get_fock(self) :
        Return Fock matrix.
    solve :
        Perform the SCF calculation.
    perturbe_fock(self, pot) :
        Add a potential to the Fock matrix.

    """
    def __init__(self, mol, basis, xc_code):
        """ SCFMethod object.

        Parameters
        ----------
        mol : qcelemental Molecule object
            Molecule information
        basis : string
            Name of the basis set to be usef.
        xc_code : string
            Density functional PySCF xc_code.

        """
        if not isinstance(basis, str):
            raise TypeError("Basis set name must be given as string.")
        if not isinstance(xc_code, str):
            raise TypeError("xc_code must be given as string.")
        SCFMethod.__init__(self, mol)
        self.mol_pyscf = get_pyscf_molecule(self.mol, basis)
        if self.restricted:
            self.scf_object = dft.RKS(self.mol_pyscf)
            self.scf_object.xc = xc_code
        else:
            raise NotImplementedError
        # Keep a clean copy of the scf object for latter
        self._scf_object = copy(self.scf_object)

    def perturbe_fock(self, pot):
        """Add an effective potential to the Fock matrix.

        Parameters
        ----------
        pot : np.ndarray(dtype=float)
            Effective potential in the form of a Fock matrix.

        """
        # Check potential type
        if not isinstance(pot, np.ndarray):
            raise TypeError("The potential should be given as np.ndarray.")
        scf_ref = copy(self.scf_object)

        def get_veff(*args):
            vh = scf_ref.get_veff(*args)
            vxc = vh.copy()
            exc = vh.exc
            ecoul = vh.ecoul
            vj = vh.vj
            vk = vh.vk
            vxc += pot
            vxc = lib.tag_array(vxc, ecoul=ecoul, exc=exc, vj=vj, vk=vk)
            return vxc
        # Override function
        self.scf_object.get_veff = get_veff

    def restore_scf_object(self):
        """Recover initial configuration."""
        self.scf_object = copy(self._scf_object)

    def get_fock(self):
        """Return Fock matrix."""
        return self.scf_object.get_veff()

    def solve(self, **scfkwargs):
        """Perform SCF calculation.

        Kwargs
        ------
        conv_tol : float
            converge threshold.
        conv_tol_grad : float
            gradients converge threshold.
        dump_chk : bool
            Whether to save SCF intermediate results in the checkpoint file
        dm0 : ndarray
            Initial guess density matrix.  If not given (the default), the kernel
            takes the density matrix generated by ``mf.get_init_guess``.
        callback : function(envs_dict) => None
            callback function takes one dict as the argument which is
            generated by the builtin function :func:`locals`, so that the
            callback function can access all local variables in the current
            envrionment.

        """
        for attr in scfkwargs:
            self.scf_object.attr = scfkwargs[attr]
        self.scf_object.kernel()
        self.energy["scf"] = self.scf_object.e_tot
        self.density = self.scf_object.make_rdm1()
